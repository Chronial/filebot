
package net.sourceforge.filebot.ui.panel.sfv;


import java.io.File;
import java.io.PrintStream;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.swing.JTable;
import javax.swing.ListSelectionModel;
import javax.swing.event.TableModelEvent;
import javax.swing.table.TableColumn;
import javax.swing.table.TableModel;

import net.sourceforge.filebot.FileFormat;
import net.sourceforge.filebot.ui.panel.sfv.ChecksumTableModel.ChecksumTableModelEvent;
import net.sourceforge.filebot.ui.panel.sfv.renderer.ChecksumTableCellRenderer;
import net.sourceforge.filebot.ui.panel.sfv.renderer.StateIconTableCellRenderer;
import net.sourceforge.filebot.ui.transfer.DefaultTransferHandler;
import net.sourceforge.filebot.ui.transfer.ExportHandler;
import net.sourceforge.filebot.ui.transfer.ImportHandler;
import net.sourceforge.filebot.ui.transfer.Saveable;
import net.sourceforge.filebot.ui.transfer.SaveableExportHandler;
import net.sourceforge.filebot.ui.transfer.TransferablePolicyImportHandler;
import net.sourceforge.filebot.ui.transferablepolicies.TransferablePolicy;


class SfvTable extends JTable implements Saveable {
	
	private final SfvTransferablePolicy transferablePolicy;
	
	
	public SfvTable() {
		ChecksumTableModel model = (ChecksumTableModel) getModel();
		
		transferablePolicy = new SfvTransferablePolicy(model);
		
		setModel(model);
		
		setFillsViewportHeight(true);
		setAutoCreateRowSorter(true);
		setAutoCreateColumnsFromModel(true);
		setAutoResizeMode(AUTO_RESIZE_SUBSEQUENT_COLUMNS);
		
		setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
		
		setRowHeight(20);
		
		ImportHandler importHandler = new TransferablePolicyImportHandler(transferablePolicy);
		ExportHandler exportHandler = new SaveableExportHandler(this);
		
		setTransferHandler(new DefaultTransferHandler(importHandler, exportHandler));
		setDragEnabled(true);
		
		setDefaultRenderer(ChecksumRow.State.class, new StateIconTableCellRenderer());
		setDefaultRenderer(Checksum.class, new ChecksumTableCellRenderer());
	}
	

	public TransferablePolicy getTransferablePolicy() {
		return transferablePolicy;
	}
	

	@Override
	protected TableModel createDefaultDataModel() {
		return new ChecksumTableModel();
	}
	

	@Override
	public void createDefaultColumnsFromModel() {
		super.createDefaultColumnsFromModel();
		
		for (int i = 0; i < getColumnCount(); i++) {
			TableColumn column = getColumnModel().getColumn(i);
			if (i == 0) {
				column.setPreferredWidth(45);
			} else if (i == 1) {
				column.setPreferredWidth(400);
			} else if (i >= 2) {
				column.setPreferredWidth(150);
			}
		}
	}
	

	public void clear() {
		transferablePolicy.reset();
		
		((ChecksumTableModel) getModel()).clear();
	}
	

	public String getDefaultFileName() {
		ChecksumTableModel model = (ChecksumTableModel) getModel();
		File columnRoot = model.getChecksumColumnRoot(0);
		
		String name = "";
		
		if (columnRoot != null)
			name = FileFormat.getFileName(columnRoot);
		
		if (name.isEmpty())
			name = "name";
		
		return name + ".sfv";
	}
	

	public boolean isSaveable() {
		return getModel().getRowCount() > 0;
	}
	

	public void removeRows(int... rowIndices) {
		ChecksumTableModel model = (ChecksumTableModel) getModel();
		model.removeRows(rowIndices);
	}
	

	@Override
	public void tableChanged(TableModelEvent e) {
		if (e.getType() == ChecksumTableModelEvent.CHECKSUM_PROGRESS) {
			repaint();
		} else {
			super.tableChanged(e);
		}
	}
	

	public void save(File file, int checksumColumnIndex) {
		try {
			PrintStream out = new PrintStream(file);
			
			ChecksumTableModel model = (ChecksumTableModel) getModel();
			File columnRoot = model.getChecksumColumnRoot(checksumColumnIndex);
			
			if (columnRoot != null) {
				SimpleDateFormat date = new SimpleDateFormat("yyyy-MM-dd");
				SimpleDateFormat time = new SimpleDateFormat("HH:mm:ss");
				
				Date now = new Date();
				out.println("; Generated by FileBot on " + date.format(now) + " at " + time.format(now));
				out.println(";");
				out.println(";");
				
				Map<String, Checksum> checksumMap = model.getChecksumColumn(columnRoot);
				
				for (String name : checksumMap.keySet()) {
					out.println(name + " " + checksumMap.get(name).getChecksumString());
				}
			}
			
			out.close();
		} catch (Exception e) {
			// should not happen
			Logger.getLogger(Logger.GLOBAL_LOGGER_NAME).log(Level.SEVERE, e.toString(), e);
		}
	}
	

	public void save(File file) {
		save(file, 0);
	}
	
}
